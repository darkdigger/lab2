import control.matlab as cm
from sympy import *
import numpy as np
import matplotlib.pyplot as plt
import control as ctr
import math
from scipy import signal

ky = 20
koc = 0.05
Tg = 4.0
Ty = 5.0
Tgm = 2.0
Toc = 1.0
TimeLine = []
for i in range(0, 300):
    TimeLine.append(i)


def n_w1(num, den):
    w1 = cm.tf(num, den)
    return w1


def n_w(num, den, name):
    w = cm.tf(num, den)
    print('Передаточная функция {0} : \n {1}'.format(name, w))
    return w


def grafic_step(f, name):
    y1, x1 = cm.step(f, TimeLine)
    plt.plot(x1, y1, "b")
    plt.title('Переходная функция {}'.format(name))
    plt.ylabel('Амплитудное значение')
    plt.xlabel('Время(c)')
    plt.grid(True)
    plt.show()


def polusa_funcii(f, name):
    print("Полюса {} функции".format(name))
    d = 0
    for i in range(len(cm.pole(f))):
        print("Полюс [%d] = %s" % (i, cm.pole(f)[i]))
        if cm.pole(f)[i].real > 0:
            print("Полюс лежит в правой полуплоскости")
            d = 1
    if d == 1:
        print("Система не устойчива, хотя бы 1 полюс лежит в правой полуплоскости")
    else:
        print("Система устойчива, ни ожин из полюсов не лежит в правой полуплоскости")


def nyquist(f, name):
    plt.title("Найквист-диаграмма {}".format(name))
    plt.ylabel("Imaginary Axis")
    plt.xlabel("Real Axis")
    w = np.logspace(-3, 3, 5000)
    cm.nyquist(f, w)
    plt.grid(True)
    plt.plot()
    plt.show()
    # critical_point = complex(-1, 0)


# описать устойчивость по найквисту


def hodograf_Mikhailova(f, name):
    z = []
    j = sqrt(-1)
    xg = []
    yg = []
    print("Рачёт переменных для построения годографа Михайлова")
    for omega in np.arange(0, 10, 0.01):
        z.append(cm.tf(f.den[0][0], [1e-20, 0])(j * omega))
    for ih in range(len(z)):
        xg.append(re(z[ih]))
        yg.append(im(z[ih]))
    if xg[1] > 0:
        print("Кривая Михайлова начинается на положительной вещественной оси")
        if yg[1] > yg[6] and xg[1] < xg[6]:
            print("Кривая Михайлова направлена против часовой стелки \n Критерий устойчивости соблюдается")
        else:
            print("Кривая Михайлова направлена по часовой стелке \n Критерий устойчивости не соблюдается")
    plt.plot(yg, xg)
    plt.title("Годограф Михайлова {}".format(name))
    plt.ylabel("Мнимая часть")
    plt.xlabel("Действительная часть")
    plt.grid(True)
    plt.show()


def bode_function(f, name):
    mag, phase, omega = cm.bode(f, dB=False, Plot=True)
    plt.title('ЛАЧХ и ЛАФЧХ {}'.format(name))
    plt.show()


def kriteriy_rausa(f, name):
    numbers = f.den[0][0]

    array_rauth = [[0 for x in range(math.ceil(len(numbers) / 2) + 1)] for y in range(len(numbers) + 1)]

    r = [0 for x in range(len(numbers) + 1)]
    print("Таблица Раусса {}:".format(name))
    for ir in range(len(numbers)):
        array_rauth.append([])
        for jr in range(math.ceil(len(numbers) / 2)):
            if ir == 0 and (jr * 2) <= len(numbers):
                array_rauth[ir][jr] = numbers[jr * 2]
            if len(numbers) % 2 == 0:
                if ir == 1 and (jr * 2 + 1) <= (len(numbers)):
                    array_rauth[ir][jr] = numbers[jr * 2 + 1]
                    # print("ir = %d \n jr = %d" % (ir, jr))
            else:
                if ir == 1 and (jr * 2 + 1) <= (len(numbers) - 1):
                    array_rauth[ir][jr] = numbers[jr * 2 + 1]
                    # print("ir = %d \n jr = %d" % (ir, jr))
            if ir > 1:
                r[ir] = array_rauth[ir - 2][0] / array_rauth[ir - 1][0]
                array_rauth[ir][jr] = array_rauth[ir - 2][jr + 1] - r[ir] * array_rauth[ir - 1][jr + 1]
        print("%d -я строка \t" % (ir + 1))
        print(array_rauth[ir], "\n")
        if array_rauth[ir][0] == 0:
            print("Первый элемент %d-ой строки равен нулю, нарушено условие устойчивости по Раусу " % ir)
            d = 1
            return d
            break
        elif array_rauth[ir][0] < 0:
            d = 1
            print("Первый элемент %d-ой строки меньше нуля, нарушено условие устойчивости по Раусу" % ir)
            return d
        else:
            if ir == len(numbers) - 1:
                d = 0
                print("Переходная функция проходит по устойчивости Рауса")
                return d


def find_pred():
    print("Зашли")
    for x in range(0, 10000, 1):
        kocn = x*0.01
        W1n = n_w1([kocn, 0], [Toc, 1])
        W11n = cm.feedback(W22, W1n, -1)
        dn = kriteriy_rausa(W11n, "Замкнутой Системы")
        print("dn = %d при koc = %.2f" % (dn, kocn))
        if dn == 1:
            print("Найден предельный коэффициент")
            print("dn = %d" % dn)
            print("W11n = %s" % W11n)
            return kocn
            break



W1 = n_w([koc, 0], [Toc, 1], "Обратной связи")
W2 = n_w(1, [Tg, 1], "Генератора")
W3 = n_w([0.01 * Tgm, 1], [0.05 * Tg, 1], "Гидравлической турбины")
W4 = n_w(ky, [Ty, 1], "Исполнительного устройства")
# последовательное соединение
W22 = cm.series(W4, W2, W3)
# учёт обратной связи
W11 = cm.feedback(W22, W1, -1)
# разомкнутая САУ
W11raz = cm.series(W22, W1)

grafic_step(W11, "Замкнутой системы")

# print("Полюса замкнутой функции: \n %s" % cm.pole(W11))
polusa_funcii(W11, "Замкнутой системы")
nyquist(W11raz, "Разомкнутой системы")
# hodograf_Mikhailova(W11raz, "Разомкнутой системы")
# bode_function(W11raz, "Разомкнутой системы")
k = kriteriy_rausa(W11, "Замкнутой системы")
print("k = %d" % k)

if k == 0:
    kocnew1 = find_pred()
    if kocnew1 > koc:
        kocnew = kocnew1 + 1
        print("Новый koc = %.2f" % kocnew)
    else:
        kocnew = kocnew1 - 1
        print("Новый koc = %.2f" % kocnew)

W1new = n_w([kocnew, 0], [Toc, 1], "Обратной связи c новым koc")
W11new = cm.feedback(W22, W1new, -1)
W11raznew = cm.series(W22, W1new)
grafic_step(W11new, "Замкнутой системы c новым koc")

# print("Полюса замкнутой функции: \n %s" % cm.pole(W11))
polusa_funcii(W11new, "Замкнутой системы c новым koc")
nyquist(W11raznew, "Разомкнутой системы c новым koc")
hodograf_Mikhailova(W11raz, "Разомкнутой системы c новым koc")
bode_function(W11raz, "Разомкнутой системы c новым koc")
